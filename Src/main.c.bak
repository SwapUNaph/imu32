/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "MPU9250.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char UART1buffer[20];
uint8_t accBuffer[6];
uint8_t gyroBuffer[6];
int16_t ax;
int16_t ay;
int16_t az;
int16_t gx;
int16_t gy;
int16_t gz;
uint8_t temp[2];
int16_t temperature;
uint8_t whoami;
float ax_off, ay_off, az_off, gx_off, gy_off, gz_off;
long count=0;

float Xacc, Yacc, Zacc, Xgyro, Ygyro, Zgyro;

void MPU9250_Test()
{
			
		MPU9250_Readbytes(&hi2c1, MPU9250_ACCEL_XOUT_H, accBuffer, 6);
//		MPU9250_Readbytes(&hi2c1, MPU9250_ACCEL_XOUT_L, &accBuffer[1], 1);
//		MPU9250_Readbytes(&hi2c1, MPU9250_ACCEL_YOUT_H, &accBuffer[2], 1);
//		MPU9250_Readbytes(&hi2c1, MPU9250_ACCEL_YOUT_L, &accBuffer[3], 1);
//		MPU9250_Readbytes(&hi2c1, MPU9250_ACCEL_ZOUT_H, &accBuffer[4], 1);
//		MPU9250_Readbytes(&hi2c1, MPU9250_ACCEL_ZOUT_L, &accBuffer[5], 1);
		
		ax = (((int16_t)accBuffer[0]) << 8) |  accBuffer[1];
		ay = (((int16_t)accBuffer[2]) << 8) |  accBuffer[3];
		az = (((int16_t)accBuffer[4]) << 8) |  accBuffer[5];
		
		ax += 56;
		ay += -16;
		az += -86;
		
		Xacc = -(float)ax * 4.78522e-3;
		Yacc = -(float)ay * 4.78522e-3;
		Zacc = -(float)az * 4.78522e-3;
		
		MPU9250_Readbytes(&hi2c1, MPU9250_GYRO_XOUT_H, gyroBuffer, 6);
		gx = ((gyroBuffer[0] << 8 ) |  gyroBuffer[1]);
		gy = ((gyroBuffer[2] << 8 ) |  gyroBuffer[3]);
		gz = ((gyroBuffer[4] << 8 ) |  gyroBuffer[5]);
		
		gx += 126;
		gy += -84;
		gz += 15;
		
		Xgyro = (float)gx * 7.62951e-3;
		Ygyro = (float)gy * 7.62951e-3;
		Zgyro = (float)gz * 7.62951e-3;
		
		MPU9250_Readbytes(&hi2c1, MPU9250_TEMP_OUT_H , temp, 2);
		temperature = ((temp[0] << 8 ) |  temp[1]);
		
		if(count++ > 0)
		{
			ax_off = (ax_off*(count-1) + (float)ax ) / count ;
			ay_off = (ay_off*(count-1) + (float)ay ) / count ;
			az_off = (az_off*(count-1) + (float)az ) / count ;
			gx_off = (gx_off*(count-1) + (float)gx ) / count ;
			gy_off = (gy_off*(count-1) + (float)gy ) / count ;
			gz_off = (gz_off*(count-1) + (float)gz ) / count ;
		}
			

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
	
  /* USER CODE BEGIN 2 */
	MPU9250_SetAccFullScale(&hi2c1, ACC_FS_16g);
	MPU9250_SetGyroFullScale(&hi2c1, GYRO_FS_500dps);
	//MPU9250_Writebit(&hi2c1, MPU9250_USER_CTRL, 0, I2C_MST_EN);
	
	//HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDR, (uint8_t*)i2cBuffer, 3, 100);
  /* USER CODE END 2 */
	MPU9250_ConfigGyroDLPFilter(&hi2c1, GYRO_DLPF_BW_5Hz);
	MPU9250_ConfigAccelDLPFilter(&hi2c1, ACCEL_DLPF_BW_5Hz);
	MPU9250_Writebytes(&hi2c1,MPU9250_IN
	
	uint8_t magID;
	AK8963_Readbytes(&hi2c1, AK8963_WIA, &magID, 1);
	
	//Get MPU ID
	MPU9250_Readbytes(&hi2c1, MPU9250_WHO_AM_I, &whoami, 1);
	
	if(whoami != 0x71)
		return 1;
	
	
  while (1)
  {
		
		/* Infinite loop */
		/* USER CODE BEGIN WHILE */
    
		MPU9250_Test();
		HAL_Delay(100);
		
	  /* USER CODE END WHILE */
  }
	
	/* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
